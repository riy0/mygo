package main

import (
  "database/sql"
  "os"
  "fmt"
  "github.com/tenntenn/sqlite"
)

func main() {
  db, err := sql.Open(sqlite.DriverName, "homeaccountbook.db")
  if err != nil{
    fmt.Fprintln(os.Stderr, "error：",err)
    os.Exit(1)
  }

  hab := NewAccountBook(db)

  if err := hab.CreateTable(); err != nil{
    fmt.Fprintln(os.Stderr, "error：",err)
    os.Exit(1)
  }

  LOOP:
    for{

      var mode int
      fmt.Println("[1]input [2]latest 5 [3]summary [4]finish")
      fmt.Printf(">")
      fmt.Scan(&mode)

      switch mode{
      case 1:
        var n int
        fmt.Print("How many things you bought?")
        fmt.Scan(&n)
  
        for i := 0; i< n; i++{
          if err := hab.AddItem(inputItem()); err != nil{
            fmt.Fprintln(os.Stderr, "error：",err)
            break LOOP
          }
        }

    case 2:
      items, err := hab.GetItems(5)
      if err != nil{
        fmt.Fprintln(os.Stderr, "error：",err)
        break LOOP
      }
      showItems(items)

    case 3:
      summaries, err:= hab.GetSummaries()
      if err != nil{
        fmt.Fprintln(os.Stderr, "error：",err)
        break LOOP
      }
      showSummary(summaries)

    case 4:
      fmt.Println("finish")
      return
    }
  }
}

// Itemを入力し返す
func inputItem() *Item {
	var item Item

	fmt.Print("品目>")
	fmt.Scan(&item.Category)

	fmt.Print("値段>")
	fmt.Scan(&item.Price)

	return &item
}

// Itemの一覧を出力する
func showItems(items []*Item) {
	fmt.Println("===========")
	// itemsの要素を1つずつ取り出してitemに入れて繰り返す
	for _, item := range items {
		fmt.Printf("[%04d] %s:%d円\n", item.ID, item.Category, item.Price)
	}
	fmt.Println("===========")
}

// 集計を出力する
func showSummary(summaries []*Summary) {
	fmt.Println("===========")
	// タブ区切りで「品目 個数 合計 平均」を出力
	fmt.Printf("品目\t個数\t合計\t平均\n")
	// summariesの要素を1つずつ取り出してsに入れて繰り返す
	for _, s := range summaries {
		fmt.Printf("%s\t%d\t%d円\t%.2f円\n", s.Category, s.Count, s.Sum, s.Avg())
	}
	fmt.Println("===========")
}
